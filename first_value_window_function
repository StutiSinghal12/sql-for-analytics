Write an SQL query to report the IDs of the users whose first and last calls on any day were with the same person. Calls are counted regardless of being the caller or the recipient. Return the result table in any order.


Input: 
Calls table:
+-----------+--------------+---------------------+
| caller_id | recipient_id | call_time           |
+-----------+--------------+---------------------+
| 8         | 4            | 2021-08-24 17:46:07 |
| 4         | 8            | 2021-08-24 19:57:13 |
| 5         | 1            | 2021-08-11 05:28:44 |
| 8         | 3            | 2021-08-17 04:04:15 |
| 11        | 3            | 2021-08-17 13:07:00 |
| 8         | 11           | 2021-08-17 22:22:22 |
+-----------+--------------+---------------------+
Output: 
+---------+
| user_id |
+---------+
| 1       |
| 4       |
| 5       |
| 8       |
+---------+
Explanation: 
On 2021-08-24, the first and last call of this day for user 8 was with user 4. User 8 should be included in the answer.
Similarly, user 4 on 2021-08-24 had their first and last call with user 8. User 4 should be included in the answer.
On 2021-08-11, user 1 and 5 had a call. This call was the only call for both of them on this day. Since this call is the first and last call of the day for both of them, they should both be included in the answer.
Approach: Partition the table based on caller and call date. For each partition check if the first row and last row have the same receiver then that caller should be in the result set. Use FIRST_VAL in ascending and descending to find the first and last values for callers involved. Since we are taking pairs here, we need to make pairs by selecting the reverse of caller and receiver as well.
 
see IMAGE IN WIKI link of fisrt value

with cte as
(
    select user_id1,
        first_value(user_id2) over (
          partition by user_id1, date(call_time) order by call_time
        ) as first_call_recp,
        first_value(user_id2) over (
          partition by user_id1, date(call_time) order by call_time desc
        ) as last_call_recp
    from
        (
        select caller_id as user_id1, recipient_id as user_id2, call_time
        from Calls
        union
        select recipient_id as user_id1, caller_id as user_id2, call_time
        from Calls
    ) t
)
select distinct user_id1 as user_id
from cte
where first_call_recp = last_call_recp
